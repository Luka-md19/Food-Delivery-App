version: '3.8'

services:
  # Auth Service
  auth:
    build:
      context: .
      dockerfile: apps/auth/Dockerfile
    container_name: auth-service
    restart: always
    env_file:
      - ./apps/auth/.env
    environment:
      - USE_DOCKER=true
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_QUEUE=email_verification
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    ports:
      - "3000:3000"
      - "3001:3001"
    networks:
      - food-delivery-network
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Menu Service
  menu:
    build:
      context: .
      dockerfile: ./apps/menu/Dockerfile
    container_name: menu-service
    restart: always
    env_file:
      - ./.env
      - ./apps/menu/.env
    environment:
      - NODE_ENV=development
      - PORT=3002
      - TCP_PORT=3003
      - USE_DOCKER=true
      # MongoDB Atlas configuration
      - MONGODB_URI=${MONGODB_URI}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - MONGODB_CONNECT_TIMEOUT=30000
      - MONGODB_SOCKET_TIMEOUT=60000
      - MONGODB_SSL_ENABLED=true
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_QUEUE=menu_service_queue
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "3002:3002"
      - "3003:3003"
    networks:
      - food-delivery-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    dns:
      - 8.8.8.8
      - 8.8.4.4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database (for Auth Service)
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: always
    env_file:
      - ./apps/auth/.env
    environment:
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_DB=${DATABASE_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - food-delivery-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # MongoDB Database (for Menu Service)
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=menu
    networks:
      - food-delivery-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # pgAdmin (for PostgreSQL management)
  pgadmin:
    image: dpage/pgadmin4:8.14
    container_name: pgadmin
    restart: always
    env_file:
      - ./apps/auth/.env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - food-delivery-network

  # RabbitMQ (for message queuing)
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - food-delivery-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis (for caching)
  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    env_file:
      - ./apps/auth/.env
    command: >
      sh -c "if [ -z \"$$REDIS_PASSWORD\" ]; then redis-server; else redis-server --requirepass \"$$REDIS_PASSWORD\"; fi"
    ports:
      - "6379:6379"
    networks:
      - food-delivery-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data:
  mongodb_data:
  rabbitmq_data:

networks:
  food-delivery-network:
    driver: bridge 